(ns assignment3.core
  (:require [quil.core :refer :all])
  (:import [java.awt.event KeyEvent]))

(def current-text-size (atom 12))

(def params {:big-text-size 30
	:background-color 25
	:foreground-color 200})

(defn pos-watch
  [k r old-state new-state]
  (when @(old-state :pen)
   (line @(first (old-state :pos)) @(second (old-state :pos)) 
         @(first (new-state :pos)) @(second (new-state :pos)))))

(defn setup []
  (smooth)
  (no-stroke)
  (set-state! 
    :pos (atom [400 400])
    :bearing (atom 0)
    :pen (atom true) 
    :message (atom "Initial state"))
  (add-watch (state :pos) :draw pos-watch))

(defn pen-up
  []
  (swap! (state :message) (str "Last: Pen up"))
  (swap! (state :pen) false))

(defn pen-down
  []
  (swap! (state :message) (str "Last: Pen down"))
  (swap! (state :pen) true))

(defn move
  [px]
  (swap! (state :message) (str "Last: Move " px))
  (swap! (state :pos) 
         [(+ @(first  (state :pos)) (cos @(state :bearing)))
          (+ @(second (state :pos)) (cos @(state :bearing)))]))

(defn turn
  [degs]
  (swap! (state :message) (str "Last: Turn " degs))
  (swap! (state :bearing) (+ @(state :bearing) (* DEG-TO-RAD degs))))

(defn draw
  []
  (background-float (params :background-color))
  (stroke-weight 20)
  (stroke-float 10)
  (fill (params :foreground-color))
  (text-size @current-text-size)
  (text @(state :message) 20 60))

(defn key-press []
  (let [raw (raw-key)
        code (key-code)
        pressed (if (= processing.core.PConstants/CODED (int raw-key)) 
                    code 
                    raw)]
    (cond 
      (= pressed \l) (turn  10)
      (= pressed \r) (turn -10)
      (= pressed \m) (move  50)
      (= pressed \d) (pen-down)
      (= pressed \u) (pen-up))))  

(defsketch key-listener
  :title "Keyboard listener example"
  :size [800 800]
  :setup setup
  :draw draw
  :key-pressed key-press)

(defn -main [& args])
